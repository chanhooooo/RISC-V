$date
	Thu Jan  2 12:59:56 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module pipeline_top_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module dut $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 # stallF $end
$var wire 1 $ stallD $end
$var wire 7 % opE [6:0] $end
$var wire 3 & funct3E [2:0] $end
$var wire 32 ' WriteDataM [31:0] $end
$var wire 5 ( Rs2E [4:0] $end
$var wire 5 ) Rs2D [4:0] $end
$var wire 5 * Rs1E [4:0] $end
$var wire 5 + Rs1D [4:0] $end
$var wire 32 , ResultW [31:0] $end
$var wire 1 - RegWriteW $end
$var wire 1 . RegWriteM $end
$var wire 1 / RegWriteE $end
$var wire 32 0 ReadDataW [31:0] $end
$var wire 5 1 RDW [4:0] $end
$var wire 5 2 RDM [4:0] $end
$var wire 5 3 RDE [4:0] $end
$var wire 32 4 RD2E [31:0] $end
$var wire 32 5 RD1E [31:0] $end
$var wire 32 6 PCTargetE [31:0] $end
$var wire 1 7 PCSrcE $end
$var wire 32 8 PCPlus4W [31:0] $end
$var wire 32 9 PCPlus4M [31:0] $end
$var wire 32 : PCPlus4E [31:0] $end
$var wire 32 ; PCPlus4D [31:0] $end
$var wire 1 < PCJalSrcE $end
$var wire 32 = PCE [31:0] $end
$var wire 32 > PCD [31:0] $end
$var wire 2 ? Mem_to_RegW [1:0] $end
$var wire 2 @ Mem_to_RegM [1:0] $end
$var wire 2 A Mem_to_RegE [1:0] $end
$var wire 1 B MemWriteM $end
$var wire 1 C MemWriteE $end
$var wire 1 D MemReadM $end
$var wire 1 E MemReadE $end
$var wire 1 F JumpE $end
$var wire 32 G InstrD [31:0] $end
$var wire 32 H Imm_Ext_E [31:0] $end
$var wire 2 I ForwardBE [1:0] $end
$var wire 2 J ForwardAE [1:0] $end
$var wire 1 K FlushE $end
$var wire 1 L FlushD $end
$var wire 1 M BranchE $end
$var wire 4 N ALU_ControlE [3:0] $end
$var wire 1 O ALUSrcE $end
$var wire 32 P ALUOutW [31:0] $end
$var wire 32 Q ALUOutM [31:0] $end
$var wire 32 R ALUOutE [31:0] $end
$scope module Decode_Cycle $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 K clr $end
$var wire 5 S Rs2D [4:0] $end
$var wire 5 T Rs1D [4:0] $end
$var wire 32 U ResultW [31:0] $end
$var wire 1 - RegWriteW $end
$var wire 1 V RegWriteD $end
$var wire 5 W RDW [4:0] $end
$var wire 5 X RDD [4:0] $end
$var wire 32 Y RD2D [31:0] $end
$var wire 32 Z RD1D [31:0] $end
$var wire 32 [ PCPlus4D [31:0] $end
$var wire 32 \ PCD [31:0] $end
$var wire 2 ] Mem_to_RegD [1:0] $end
$var wire 1 ^ MemWriteD $end
$var wire 1 _ MemReadD $end
$var wire 1 ` JumpD $end
$var wire 32 a InstrD [31:0] $end
$var wire 32 b Imm_Ext_D [31:0] $end
$var wire 3 c ImmSrcD [2:0] $end
$var wire 1 d BranchD $end
$var wire 4 e ALU_ControlD [3:0] $end
$var wire 1 f ALUSrcD $end
$var reg 1 O ALUSrcE $end
$var reg 4 g ALU_ControlE [3:0] $end
$var reg 1 M BranchE $end
$var reg 32 h Imm_Ext_E [31:0] $end
$var reg 1 F JumpE $end
$var reg 1 E MemReadE $end
$var reg 1 C MemWriteE $end
$var reg 2 i Mem_to_RegE [1:0] $end
$var reg 32 j PCE [31:0] $end
$var reg 32 k PCPlus4E [31:0] $end
$var reg 32 l RD1E [31:0] $end
$var reg 32 m RD2E [31:0] $end
$var reg 5 n RDE [4:0] $end
$var reg 1 / RegWriteE $end
$var reg 5 o Rs1E [4:0] $end
$var reg 5 p Rs2E [4:0] $end
$var reg 3 q funct3E [2:0] $end
$var reg 7 r opE [6:0] $end
$scope module Register_Files $end
$var wire 5 s Addr1 [4:0] $end
$var wire 5 t Addr2 [4:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 u WD3 [31:0] $end
$var wire 1 - RegWrite $end
$var wire 32 v RD2 [31:0] $end
$var wire 32 w RD1 [31:0] $end
$var wire 5 x Addr3 [4:0] $end
$upscope $end
$scope module Sign_Extend $end
$var wire 32 y in [31:0] $end
$var wire 3 z ImmSrc [2:0] $end
$var reg 32 { Imm_Ext [31:0] $end
$upscope $end
$scope module control_unit_top $end
$var wire 3 | funct3 [2:0] $end
$var wire 7 } funct7 [6:0] $end
$var wire 7 ~ op [6:0] $end
$var wire 1 V RegWrite $end
$var wire 2 !" Mem_to_Reg [1:0] $end
$var wire 1 ^ MemWrite $end
$var wire 1 _ MemRead $end
$var wire 1 ` Jump $end
$var wire 3 "" ImmSrc [2:0] $end
$var wire 1 d Branch $end
$var wire 4 #" ALU_Control [3:0] $end
$var wire 1 f ALUSrc $end
$var wire 2 $" ALUOp [1:0] $end
$scope module ALU_dec $end
$var wire 3 %" funct3 [2:0] $end
$var wire 7 &" funct7 [6:0] $end
$var wire 2 '" ALUOp [1:0] $end
$var reg 4 (" ALU_Control [3:0] $end
$upscope $end
$scope module main_dec $end
$var wire 7 )" op [6:0] $end
$var parameter 7 *" B_type $end
$var parameter 7 +" I_type $end
$var parameter 7 ," J_type $end
$var parameter 7 -" R_type $end
$var parameter 7 ." S_type $end
$var parameter 7 /" U_type $end
$var parameter 7 0" lw $end
$var reg 2 1" ALUOp [1:0] $end
$var reg 1 f ALUSrc $end
$var reg 1 d Branch $end
$var reg 3 2" ImmSrc [2:0] $end
$var reg 1 ` Jump $end
$var reg 1 _ MemRead $end
$var reg 1 ^ MemWrite $end
$var reg 2 3" Mem_to_Reg [1:0] $end
$var reg 1 V RegWrite $end
$upscope $end
$upscope $end
$upscope $end
$scope module Execute_Cycle $end
$var wire 1 O ALUSrcE $end
$var wire 4 4" ALU_ControlE [3:0] $end
$var wire 1 M BranchE $end
$var wire 32 5" Imm_Ext_E [31:0] $end
$var wire 1 F JumpE $end
$var wire 1 E MemReadE $end
$var wire 1 C MemWriteE $end
$var wire 2 6" Mem_to_RegE [1:0] $end
$var wire 32 7" PCE [31:0] $end
$var wire 32 8" PCPlus4E [31:0] $end
$var wire 1 7 PCSrcE $end
$var wire 32 9" RD1E [31:0] $end
$var wire 32 :" RD2E [31:0] $end
$var wire 5 ;" RDE [4:0] $end
$var wire 1 / RegWriteE $end
$var wire 1 <" SignOp $end
$var wire 32 =" WriteDataE [31:0] $end
$var wire 1 >" ZeroOp $end
$var wire 1 ! clk $end
$var wire 3 ?" funct3E [2:0] $end
$var wire 7 @" opE [6:0] $end
$var wire 1 " rst $end
$var wire 1 A" ZeroE $end
$var wire 32 B" SrcB_interim [31:0] $end
$var wire 32 C" SrcBE [31:0] $end
$var wire 32 D" SrcAE [31:0] $end
$var wire 1 E" SignE $end
$var wire 32 F" ResultW [31:0] $end
$var wire 32 G" PCTargetE [31:0] $end
$var wire 1 < PCJalSrcE $end
$var wire 2 H" ForwardBE [1:0] $end
$var wire 2 I" ForwardAE [1:0] $end
$var wire 1 J" BranchOp $end
$var wire 32 K" ALUOutE [31:0] $end
$var reg 32 L" ALUOutM [31:0] $end
$var reg 1 D MemReadM $end
$var reg 1 B MemWriteM $end
$var reg 2 M" Mem_to_RegM [1:0] $end
$var reg 32 N" PCPlus4M [31:0] $end
$var reg 5 O" RDM [4:0] $end
$var reg 1 . RegWriteM $end
$var reg 32 P" WriteDataM [31:0] $end
$scope module ALU $end
$var wire 4 Q" ALU_Control [3:0] $end
$var wire 1 A" Zero $end
$var wire 32 R" Sum [31:0] $end
$var wire 32 S" SrcB [31:0] $end
$var wire 32 T" SrcA [31:0] $end
$var wire 1 E" Sign $end
$var reg 32 U" ALUOut [31:0] $end
$upscope $end
$scope module PC_Adder $end
$var wire 32 V" A [31:0] $end
$var wire 32 W" B [31:0] $end
$var wire 32 X" C [31:0] $end
$upscope $end
$scope module SrcA_Mux $end
$var wire 32 Y" a [31:0] $end
$var wire 32 Z" c [31:0] $end
$var wire 2 [" s [1:0] $end
$var wire 32 \" d [31:0] $end
$var wire 32 ]" b [31:0] $end
$upscope $end
$scope module SrcB_Mux $end
$var wire 32 ^" a [31:0] $end
$var wire 32 _" c [31:0] $end
$var wire 2 `" s [1:0] $end
$var wire 32 a" d [31:0] $end
$var wire 32 b" b [31:0] $end
$upscope $end
$scope module alu_src_mux $end
$var wire 32 c" a [31:0] $end
$var wire 32 d" b [31:0] $end
$var wire 1 O s $end
$var wire 32 e" c [31:0] $end
$upscope $end
$upscope $end
$scope module Fetch_Cycle $end
$var wire 32 f" ALUOutE [31:0] $end
$var wire 1 < PCJalSrcE $end
$var wire 1 7 PCSrcE $end
$var wire 32 g" PCTargetE [31:0] $end
$var wire 1 h" PCWrite $end
$var wire 1 ! clk $end
$var wire 1 i" en $end
$var wire 1 " rst $end
$var wire 1 L clr $end
$var wire 32 j" PC_next [31:0] $end
$var wire 32 k" PCPlus4F [31:0] $end
$var wire 32 l" PCF [31:0] $end
$var wire 32 m" InstrF [31:0] $end
$var wire 32 n" BranJumpTargetE [31:0] $end
$var reg 32 o" InstrD [31:0] $end
$var reg 32 p" PCD [31:0] $end
$var reg 32 q" PCPlus4D [31:0] $end
$scope module Instr_Mem $end
$var wire 1 " rst $end
$var wire 32 r" RD [31:0] $end
$var wire 32 s" Instr_Addr [31:0] $end
$upscope $end
$scope module Mux_Branch_Jump $end
$var wire 32 t" a [31:0] $end
$var wire 32 u" b [31:0] $end
$var wire 1 < s $end
$var wire 32 v" c [31:0] $end
$upscope $end
$scope module Mux_PC $end
$var wire 32 w" b [31:0] $end
$var wire 1 7 s $end
$var wire 32 x" c [31:0] $end
$var wire 32 y" a [31:0] $end
$upscope $end
$scope module PC_Adder $end
$var wire 32 z" B [31:0] $end
$var wire 32 {" C [31:0] $end
$var wire 32 |" A [31:0] $end
$upscope $end
$scope module PC_module $end
$var wire 32 }" PC_next [31:0] $end
$var wire 1 ! clk $end
$var wire 1 h" en $end
$var wire 1 " rst $end
$var reg 32 ~" PC [31:0] $end
$upscope $end
$upscope $end
$scope module Hazard_Detection_Unit $end
$var wire 1 L FlushD $end
$var wire 1 K FlushE $end
$var wire 1 E MemReadE $end
$var wire 1 7 PCSrcE $end
$var wire 5 !# RDE [4:0] $end
$var wire 5 "# Rs1D [4:0] $end
$var wire 5 ## Rs2D [4:0] $end
$var wire 1 $# lwstall $end
$var wire 1 $ stallD $end
$var wire 1 # stallF $end
$upscope $end
$scope module Hazard_Unit $end
$var wire 5 %# RDM [4:0] $end
$var wire 1 . RegWriteM $end
$var wire 5 &# Rs1E [4:0] $end
$var wire 5 '# Rs2E [4:0] $end
$var wire 1 " rst $end
$var wire 1 - RegWriteW $end
$var wire 5 (# RDW [4:0] $end
$var reg 2 )# ForwardAE [1:0] $end
$var reg 2 *# ForwardBE [1:0] $end
$upscope $end
$scope module Memory_Cylce $end
$var wire 32 +# ALUOutM [31:0] $end
$var wire 1 D MemReadM $end
$var wire 1 B MemWriteM $end
$var wire 2 ,# Mem_to_RegM [1:0] $end
$var wire 32 -# PCPlus4M [31:0] $end
$var wire 5 .# RDM [4:0] $end
$var wire 1 . RegWriteM $end
$var wire 32 /# WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 0# ReadDataM [31:0] $end
$var reg 32 1# ALUOutW [31:0] $end
$var reg 2 2# Mem_to_RegW [1:0] $end
$var reg 32 3# PCPlus4W [31:0] $end
$var reg 5 4# RDW [4:0] $end
$var reg 32 5# ReadDataW [31:0] $end
$var reg 1 - RegWriteW $end
$scope module Data_Mem $end
$var wire 32 6# Data_Addr [31:0] $end
$var wire 1 D MemRead $end
$var wire 1 B MemWrite $end
$var wire 32 7# WD [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 8# RD [31:0] $end
$upscope $end
$upscope $end
$scope module WriteBack_Cycle $end
$var wire 32 9# ALUOutW [31:0] $end
$var wire 2 :# Mem_to_RegW [1:0] $end
$var wire 32 ;# PCPlus4W [31:0] $end
$var wire 32 <# ReadDataW [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 =# ResultW [31:0] $end
$scope module result_mux $end
$var wire 32 ># a [31:0] $end
$var wire 32 ?# b [31:0] $end
$var wire 32 @# c [31:0] $end
$var wire 2 A# s [1:0] $end
$var wire 32 B# d [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b11 0"
b110111 /"
b100011 ."
b110011 -"
b1101111 ,"
b10011 +"
b1100011 *"
$end
#0
$dumpvars
b0 B#
b0 A#
b0 @#
b0 ?#
b0 >#
b0 =#
b0 <#
b0 ;#
b0 :#
b0 9#
b0 8#
b0 7#
b0 6#
b0 5#
b0 4#
b0 3#
b0 2#
b0 1#
b0 0#
b0 /#
b0 .#
b0 -#
b0 ,#
b0 +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
b0 %#
0$#
b0 ##
b0 "#
b0 !#
bx ~"
bx }"
bx |"
bx {"
b100 z"
bx y"
bx x"
b0 w"
b0 v"
b0 u"
b0 t"
bx s"
b0 r"
b0 q"
b0 p"
b0 o"
b0 n"
b0 m"
bx l"
bx k"
bx j"
1i"
1h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 _"
b0 ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
b0 K"
1J"
b0 I"
b0 H"
b0 G"
b0 F"
0E"
b0 D"
b0 C"
b0 B"
1A"
b0 @"
b0 ?"
1>"
b0 ="
0<"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b10 1"
b0 )"
b0 ("
b10 '"
b0 &"
b0 %"
b10 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
0f
b0 e
0d
b0 c
b0 b
b0 a
0`
0_
0^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
1V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
0O
b0 N
0M
0L
0K
b0 J
b0 I
b0 H
b0 G
0F
0E
0D
0C
0B
b0 A
b0 @
b0 ?
b0 >
b0 =
0<
b0 ;
b0 :
b0 9
b0 8
07
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
0/
0.
0-
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
0$
0#
0"
1!
$end
#50
0!
#100
b100 j"
b100 x"
b100 }"
b100 k"
b100 y"
b100 {"
b0 l"
b0 s"
b0 |"
b0 ~"
1!
#150
0!
#200
b1000001000000110110011 m"
b1000001000000110110011 r"
1"
1!
#250
0!
#300
b10000011000111001100011 m"
b10000011000111001100011 r"
b10 Y
b10 v
b1 Z
b1 w
b1000 j"
b1000 x"
b1000 }"
b10 t
b1 s
b110011 ~
b110011 )"
b10 )
b10 S
b10 ##
b1 +
b1 T
b1 "#
b11 X
b10 b
b10 {
b1000 k"
b1000 y"
b1000 {"
b100 l"
b100 s"
b100 |"
b100 ~"
b100 ;
b100 [
b100 q"
b1000001000000110110011 G
b1000001000000110110011 a
b1000001000000110110011 y
b1000001000000110110011 o"
1/
1!
#350
0!
#400
0J"
0>"
0A"
b1 e
b1 #"
b1 ("
b11000101000001000110011 m"
b11000101000001000110011 r"
b10 C"
b10 S"
b10 e"
b11 R
b11 K"
b11 U"
b11 f"
b11 u"
b11 Y
b11 v
b0 Z
b0 w
b1 $"
b1 '"
b1 1"
b10 c
b10 z
b10 ""
b10 2"
1d
0V
b1100 j"
b1100 x"
b1100 }"
b10 n"
b10 v"
b10 w"
b10 ="
b10 B"
b10 a"
b10 c"
b11 R"
b1 D"
b1 T"
b1 \"
b100 t
b11 s
b1100011 ~
b1100011 )"
b100 )
b100 S
b100 ##
b11 +
b11 T
b11 "#
b11100 X
b11100 b
b11100 {
b1100 k"
b1100 y"
b1100 {"
b1000 l"
b1000 s"
b1000 |"
b1000 ~"
1.
b11 3
b11 n
b11 ;"
b11 !#
b100 :
b100 k
b100 8"
b10 6
b10 G"
b10 X"
b10 g"
b10 t"
b10 H
b10 h
b10 5"
b10 W"
b10 d"
b110011 %
b110011 r
b110011 @"
b10 (
b10 p
b10 '#
b1 *
b1 o
b1 &#
b10 4
b10 m
b10 :"
b10 ^"
b1 5
b1 l
b1 9"
b1 Y"
b1000 ;
b1000 [
b1000 q"
b10000011000111001100011 G
b10000011000111001100011 a
b10000011000111001100011 y
b10000011000111001100011 o"
b100 >
b100 \
b100 p"
1!
#450
0!
#500
1K
1L
17
1J"
1>"
1A"
b0 e
b0 #"
b0 ("
0<"
0E"
b0 m"
b0 r"
b0 Y
b0 v
b1 Z
b1 w
b10 $"
b10 '"
b10 1"
b0 c
b0 z
b0 ""
b0 2"
0d
1V
b11 C"
b11 S"
b11 e"
b100000 j"
b100000 x"
b100000 }"
b110 t
b101 s
b110011 ~
b110011 )"
b110 )
b110 S
b110 ##
b101 +
b101 T
b101 "#
b100 X
b110 b
b110 {
b100000 n"
b100000 v"
b100000 w"
b11 ="
b11 B"
b11 a"
b11 c"
b11 D"
b11 T"
b11 \"
b0 R
b0 K"
b0 U"
b0 f"
b0 u"
b0 R"
b10 J
b10 I"
b10 ["
b10 )#
b10000 k"
b10000 y"
b10000 {"
b1100 l"
b1100 s"
b1100 |"
b1100 ~"
b1100 ;
b1100 [
b1100 q"
b11000101000001000110011 G
b11000101000001000110011 a
b11000101000001000110011 y
b11000101000001000110011 o"
b1000 >
b1000 \
b1000 p"
b11100 3
b11100 n
b11100 ;"
b11100 !#
b1000 :
b1000 k
b1000 8"
b11100 H
b11100 h
b11100 5"
b11100 W"
b11100 d"
b100000 6
b100000 G"
b100000 X"
b100000 g"
b100000 t"
b100 =
b100 j
b100 7"
b100 V"
b1100011 %
b1100011 r
b1100011 @"
b100 (
b100 p
b100 '#
b11 *
b11 o
b11 &#
b11 4
b11 m
b11 :"
b11 ^"
b0 5
b0 l
b0 9"
b0 Y"
b1 N
b1 g
b1 4"
b1 Q"
1M
0/
b10 '
b10 P"
b10 /#
b10 7#
b11 2
b11 O"
b11 %#
b11 .#
b100 9
b100 N"
b100 -#
b11 Q
b11 L"
b11 Z"
b11 _"
b11 +#
b11 6#
1-
1!
#550
0!
#600
1J"
1>"
0K
b1000000100101000000001110110011 m"
b1000000100101000000001110110011 r"
b100100 j"
b100100 x"
b100100 }"
b0 D"
b0 T"
b0 \"
b0 C"
b0 S"
b0 e"
1A"
0<"
0E"
0L
07
b0 Z
b0 w
b11 ,
b11 U
b11 u
b11 F"
b11 ]"
b11 b"
b11 =#
b11 B#
b0 n"
b0 v"
b0 w"
b0 J
b0 I"
b0 ["
b0 )#
b0 ="
b0 B"
b0 a"
b0 c"
b0 R
b0 K"
b0 U"
b0 f"
b0 u"
b0 R"
b0 t
b0 s
b0 ~
b0 )"
b0 )
b0 S
b0 ##
b0 +
b0 T
b0 "#
b0 X
b0 b
b0 {
b100100 k"
b100100 y"
b100100 {"
b100000 l"
b100000 s"
b100000 |"
b100000 ~"
b100 8
b100 3#
b100 ;#
b100 @#
b11 P
b11 1#
b11 9#
b11 >#
b11 1
b11 W
b11 x
b11 (#
b11 4#
b11 '
b11 P"
b11 /#
b11 7#
b11100 2
b11100 O"
b11100 %#
b11100 .#
b1000 9
b1000 N"
b1000 -#
b0 Q
b0 L"
b0 Z"
b0 _"
b0 +#
b0 6#
0.
b0 3
b0 n
b0 ;"
b0 !#
b0 :
b0 k
b0 8"
b0 H
b0 h
b0 5"
b0 W"
b0 d"
b0 6
b0 G"
b0 X"
b0 g"
b0 t"
b0 =
b0 j
b0 7"
b0 V"
b0 %
b0 r
b0 @"
b0 (
b0 p
b0 '#
b0 *
b0 o
b0 &#
b0 4
b0 m
b0 :"
b0 ^"
b0 N
b0 g
b0 4"
b0 Q"
0M
b0 ;
b0 [
b0 q"
b0 G
b0 a
b0 y
b0 o"
b0 >
b0 \
b0 p"
1!
#650
0!
#700
bx m"
bx r"
b1 e
b1 #"
b1 ("
b101000 j"
b101000 x"
b101000 }"
b1001 t
b1000 s
b100000 }
b100000 &"
b110011 ~
b110011 )"
b1001 )
b1001 S
b1001 ##
b1000 +
b1000 T
b1000 "#
b111 X
b10000001001 b
b10000001001 {
b0 ,
b0 U
b0 u
b0 F"
b0 ]"
b0 b"
b0 =#
b0 B#
b101000 k"
b101000 y"
b101000 {"
b100100 l"
b100100 s"
b100100 |"
b100100 ~"
b100100 ;
b100100 [
b100100 q"
b1000000100101000000001110110011 G
b1000000100101000000001110110011 a
b1000000100101000000001110110011 y
b1000000100101000000001110110011 o"
b100000 >
b100000 \
b100000 p"
1/
b0 '
b0 P"
b0 /#
b0 7#
b0 2
b0 O"
b0 %#
b0 .#
b0 9
b0 N"
b0 -#
b1000 8
b1000 3#
b1000 ;#
b1000 @#
b0 P
b0 1#
b0 9#
b0 >#
b11100 1
b11100 W
b11100 x
b11100 (#
b11100 4#
0-
1!
#750
0!
#800
1J"
1>"
1A"
bx Y
bx v
bx Z
bx w
b0x e
b0x #"
b0x ("
b101100 j"
b101100 x"
b101100 }"
b10000101001 n"
b10000101001 v"
b10000101001 w"
b0 R
b0 K"
b0 U"
b0 f"
b0 u"
b0 R"
bx t
bx s
bx }
bx &"
bx |
bx %"
bx ~
bx )"
bx )
bx S
bx ##
bx +
bx T
bx "#
bx X
bx b
bx {
b101100 k"
b101100 y"
b101100 {"
b101000 l"
b101000 s"
b101000 |"
b101000 ~"
b0 8
b0 3#
b0 ;#
b0 @#
b0 1
b0 W
b0 x
b0 (#
b0 4#
1.
b111 3
b111 n
b111 ;"
b111 !#
b100100 :
b100100 k
b100100 8"
b10000001001 H
b10000001001 h
b10000001001 5"
b10000001001 W"
b10000001001 d"
b10000101001 6
b10000101001 G"
b10000101001 X"
b10000101001 g"
b10000101001 t"
b100000 =
b100000 j
b100000 7"
b100000 V"
b110011 %
b110011 r
b110011 @"
b1001 (
b1001 p
b1001 '#
b1000 *
b1000 o
b1000 &#
b1 N
b1 g
b1 4"
b1 Q"
b101000 ;
b101000 [
b101000 q"
bx G
bx a
bx y
bx o"
b100100 >
b100100 \
b100100 p"
1!
#850
0!
#900
x<
bx C"
bx S"
bx e"
x>"
b110000 j"
b110000 x"
b110000 }"
bx n"
bx v"
bx w"
bx ="
bx B"
bx a"
bx c"
bx D"
bx T"
bx \"
bx R"
xJ"
b110000 k"
b110000 y"
b110000 {"
b101100 l"
b101100 s"
b101100 |"
b101100 ~"
b101100 ;
b101100 [
b101100 q"
b101000 >
b101000 \
b101000 p"
bx 3
bx n
bx ;"
bx !#
b101000 :
b101000 k
b101000 8"
bx H
bx h
bx 5"
bx W"
bx d"
bx 6
bx G"
bx X"
bx g"
bx t"
b100100 =
b100100 j
b100100 7"
b100100 V"
bx %
bx r
bx @"
bx (
bx p
bx '#
bx *
bx o
bx &#
bx 4
bx m
bx :"
bx ^"
bx 5
bx l
bx 9"
bx Y"
b0x N
b0x g
b0x 4"
b0x Q"
bx &
bx q
bx ?"
b111 2
b111 O"
b111 %#
b111 .#
b100100 9
b100100 N"
b100100 -#
1-
1!
#950
0!
#1000
b110100 j"
b110100 x"
b110100 }"
b110100 k"
b110100 y"
b110100 {"
b110000 l"
b110000 s"
b110000 |"
b110000 ~"
b100100 8
b100100 3#
b100100 ;#
b100100 @#
b111 1
b111 W
b111 x
b111 (#
b111 4#
bx '
bx P"
bx /#
bx 7#
bx 2
bx O"
bx %#
bx .#
b101000 9
b101000 N"
b101000 -#
b101100 :
b101100 k
b101100 8"
b101000 =
b101000 j
b101000 7"
b101000 V"
b110000 ;
b110000 [
b110000 q"
b101100 >
b101100 \
b101100 p"
1!
#1050
0!
#1100
b111000 j"
b111000 x"
b111000 }"
b111000 k"
b111000 y"
b111000 {"
b110100 l"
b110100 s"
b110100 |"
b110100 ~"
b110100 ;
b110100 [
b110100 q"
b110000 >
b110000 \
b110000 p"
b110000 :
b110000 k
b110000 8"
b101100 =
b101100 j
b101100 7"
b101100 V"
b101100 9
b101100 N"
b101100 -#
b101000 8
b101000 3#
b101000 ;#
b101000 @#
bx 1
bx W
bx x
bx (#
bx 4#
1!
#1150
0!
#1200
b111100 j"
b111100 x"
b111100 }"
b111100 k"
b111100 y"
b111100 {"
b111000 l"
b111000 s"
b111000 |"
b111000 ~"
b101100 8
b101100 3#
b101100 ;#
b101100 @#
b110000 9
b110000 N"
b110000 -#
b110100 :
b110100 k
b110100 8"
b110000 =
b110000 j
b110000 7"
b110000 V"
b111000 ;
b111000 [
b111000 q"
b110100 >
b110100 \
b110100 p"
1!
